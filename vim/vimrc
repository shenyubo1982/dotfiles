"
"          __  __ /\_\    ___ ___   _ __   ___   
"         /\ \/\ \\/\ \ /' __` __`\/\`'__\/'___\ 
"         \ \ \_/ |\ \ \/\ \/\ \/\ \ \ \//\ \__/ 
"          \ \___/  \ \_\ \_\ \_\ \_\ \_\\ \____\
"           \/__/    \/_/\/_/\/_/\/_/\/_/ \/____/
"                                                
"
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
" set number
set relativenumber

call plug#begin('~/.vim/plugged')
Plug 'kien/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'easymotion/vim-easymotion'
Plug 'Yggdroot/indentLine'
Plug 'mhinz/vim-startify'
" Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdcommenter'
" Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'godlygeek/tabular' 
Plug 'plasticboy/vim-markdown'
Plug 'mzlogin/vim-markdown-toc'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug'] }
Plug 'ferrine/md-img-paste.vim'
Plug 'ferrine/md-img-paste.vim'
Plug 'wakatime/vim-wakatime'
Plug 'github/copilot.vim'
" Plug 'tpope/surround-vim'
call plug#end()

" gruvbox setting
colorscheme gruvbox
set background=dark


" easymotion 
nmap ss <Plug>(easymotion-s2)

"airline
" let g:airline_powerline_fonts = 1
let g:airline_theme='bubblegum'

" Yggdroot/indentline
let g:indentLine_setColors = 0
let g:indentLine_defaultGroup = 'SpecialKey'
"let g:indentLine_enabled = 0
"let g:indentLine_color_term = 239


" nerdcommenter config 
let mapleader=' '
"add spaces after comment delimiters by default
let g:NERDSpaceDelims=1
" python 自动的会多加一个空格
au FileType python let g:NERDSpaceDelims = 0
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
" let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailigWhitespace = 1
" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"" NERDTree config
"" autocmd vimenter * NERDTree  "自动开启Nerdtree
"let g:NERDTreeWinSize = 25 "设定 NERDTree 视窗大小
"" let NERDTreeShowBookmarks=1  " 开启Nerdtree时自动显示Bookmarks
""打开vim时如果没有文件自动打开NERDTree
"" autocmd vimenter * if !argc()|NERDTree|endif
""当NERDTree为剩下的唯一窗口时自动关闭
"" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"" 设置树的显示图标
"let g:NERDTreeDirArrowExpandable = '+'
"let g:NERDTreeDirArrowCollapsible = '-'
"let NERDTreeIgnore = ['\.pyc$']  " 过滤所有.pyc文件不显示
"" let g:NERDTreeShowLineNumbers=0 " 是否显示行号
"let g:NERDTreeHidden=0     "不显示隐藏文件
"""Making it prettier
"let NERDTreeMinimalUI = 1
"let NERDTreeDirArrows = 1
"nnoremap <F3> :NERDTreeToggle<CR> " 开启/关闭nerdtree快捷键
"

" fzf 快捷键
nmap ff :Files<CR>
nmap fb :Buffers<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""Vim-markdown Plugin 
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:vim_markdown_math = 1     							
let g:vim_markdown_auto_extension_ext ='txt' 				
let g:vim_markdown_no_default_key_mappings = 1     			
let g:vim_markdown_folding_disabled = 1     				
let g:vim_markdown_folding_style_pythonic = 1  				
let g:vim_markdown_override_foldtext = 0 	
let g:vim_markdown_folding_level = 6   	
let g:vim_markdown_toc_autofit = 1   
let g:vim_markdown_emphass_multiline = 0  
let g:vim_markdown_fenced_languages = ['csharp=cs'] 
let g:vim_markdown_strikethrough = 1    	



" markdown preview config Start
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" defalt: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_to_the_world = 1
let g:mkdp_open_ip = '127.0.0.1'
let g:mkdp_port = 8080
function! g:Open_browser(url)
    silent exe '!lemonade open 'a:url
endfunction
let g:mkdp_browserfunc = 'g:Open_browser'




" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
" content_editable: if enable content editable for preview page, default: v:false
" disable_filename: if disable filename header for preview page, default: 0
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }

" use a custom markdown style must be absolute path
" like '/Users/username/markdown.css' or expand('~/markdown.css')
let g:mkdp_markdown_css = ''

" like '/Users/username/highlight.css' or expand('~/highlight.css')
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '「${name}」'

" recognized filetypes
" these filetypes will have MarkdownPreview... commands
let g:mkdp_filetypes = ['markdown']
" markdown preview config end

" ferrine/md-img-paste.vim config
autocmd FileType markdown nmap <buffer><silent> <leader>i :call mdip#MarkdownClipboardImage()<CR>
let g:mdip_imgdir = '.'
" let g:mdip_imgname = 'image'



" go-vim config
au FileType go nmap <leader>i <Plug>(go-imports)

" matchit.vim config
let b:match_word='\<begin\>:\<end\>,'
    \ . '\<while\>:\<continue\>:<break\>:\<endwhile\>,'
    \ . '\<if\>:\<else if\>:<else\>,'
    \ . '\<module\>:\<endmodule\>,'
    \ . '\<task\>:\<endtask\>,'
    \ . '\<function\>:\<endfunction\>,'
    \ . '\<program\>:\<endprogram\>'
    \ . '\<program\>:\<endprogram\>'
let b:matchit_ignorecase=1    "开启 忽略大小写



" It works without any configuration, but you might want to look into the documentation for further customization:
" vim-startify
" :h startify
" :h startify-faq
"设置书签
let g:startify_bookmarks = [
            \ '~/.vim/vimrc',
            \ '~/.zshrc',
            \ '~/.tmux.conf',
            \ '~/.tmux.conf.local',
	    \ '~/mygit/mac-config/myAlias.zsh',
	    \ '$ZSH/oh-my-zsh.sh',
	    \ '~/.gitconfig', 
	    \ '~/.wrangler/config/default.toml'
            \]

"起始页显示的列表长度
let g:startify_files_number = 20
"自动加载session
let g:startify_session_autoload = 1
"过滤列表，支持正则表达式
let g:startify_skiplist = [
       \ '^/tmp',
       \ ]
"自定义Header和Footer
"let g:startify_custom_header = [
"            \ '+------------------------------+',
"            \ '|                              |',
"            \ '|    Still waters run deep!    |',
"            \ '|                              |',
"            \ '+----------------+-------------+',
"            \]
"

"let g:startify_custom_header = [
			"\' ___  ___  ___          ___             ___    ___ ___  ___  ________  ________ ',    
			"\'|\  \|\  \|\  \        |\  \           |\  \  /  /|\  \|\  \|\   __  \|\   __  \ ',   
			"\'\ \  \\\  \ \  \       \ \  \          \ \  \/  / | \  \\\  \ \  \|\ /\ \  \|\  \ ',  
			"\' \ \   __  \ \  \       \ \  \          \ \    / / \ \  \\\  \ \   __  \ \  \\\  \ ', 
			"\'  \ \  \ \  \ \  \       \ \__\          \/  /  /   \ \  \\\  \ \  \|\  \ \  \\\  \ ',
			"\'   \ \__\ \__\ \__\       \|__|        __/  / /      \ \_______\ \_______\ \_______\',
			"\'    \|__|\|__|\|__|           ___     |\___/ /        \|_______|\|_______|\|_______|',
			"\'                             |\__\    \|___|/                                       ',
			"\'                             \|__|                                                  ',
			"\'                                                                                    ',
			"\]

let g:startify_custom_footer = [
	    \ '+------------------------------+',
	    \ '|     Keep an open mind!       |',
	    \ '+----------------+-------------+',
	    \]

" source ~/.vim/vimrc 
" 自定义键盘映射（快捷键）
" 全选
nnoremap <leader>sa ggVG"
" 让vim粘贴的内容与系统粘贴板互通
vmap <C-c> "*y
" vmap <leader>y "*yy<Esc>
vmap <C-v> "*p
" vmap <C-c> :w !pbcopy<CR><CR>
" vim clipboard ctrl+c 
" set clipboard=unnamed
"
"
"

" coco的vim配置文件加载
" source ~/.vim/coc-vimrc

" surround.vim 说明
"   Old text                  Command     New text ~
"   \"Hello *world!"           ds"         Hello world!
"   [123+4*56]/2              cs])        (123+456)/2
"   \"Look ma, I'm *HTML!"     cs"<q>      <q>Look ma, I'm HTML!</q>
"   if *x>3 {                 ysW(        if ( x>3 ) {
"   my $str = *whee!;         vllllS'     my $str = 'whee!';
" https://github.com/tpope/vim-surround/blob/master/doc/surround.txt



